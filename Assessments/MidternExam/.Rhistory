stages = c("install", "render")
),
latex = tools::Rd2latex(helpfile),
Rd = tools:::prepare_Rd(helpfile)
)
)
if (format == "html") {
i <- grep("<body>", hs)
j <- grep("</body>", hs)
hs <- hs[(i+1):(j-1)]
}
hs <- c(before, hs, after)
hs <- cat(hs, sep = "\n")
invisible(hs)
}
library(MASS)
data("Boston")
Boston[10, ]
print(help(Boston))
help_console("Boston", "base", format = "html")
help_console <- function(topic, package,
format=c("text", "html", "latex", "Rd"),
before=NULL, after=NULL) {
# topic - the command for which help is required
# package - the package name with the required topic
# format - output format
# before - place code before the output e.g. "<blockquote>"
# after - place code after the output e.g. "</blockquote>"
# based on code by Noam Ross
#  http://www.noamross.net/archives/2013-06-18-helpconsoleexample/
# St√©phane Laurent
#  https://stackoverflow.com/questions/60468080/
#   print-an-r-help-file-vignette-as-output-into-an-r-html-notebook
# and Michael Sumner (mdsumner)
#  https://stackoverflow.com/questions/7495685/
#   how-to-access-the-help-documentation-rd-source-files-in-r
format <- match.arg(format)
if (!is.character(topic)) topic <- deparse(substitute(topic))
db <- tools::Rd_db(package)
helpfile <- db[paste0(topic, ".Rd")][[1]]
hs <- capture.output(
switch(
format,
text = tools::Rd2txt(helpfile),
html = tools::Rd2HTML(
helpfile,
package = "",
stages = c("install", "render")
),
latex = tools::Rd2latex(helpfile),
Rd = tools:::prepare_Rd(helpfile)
)
)
if (format == "html") {
i <- grep("<body>", hs)
j <- grep("</body>", hs)
hs <- hs[(i+1):(j-1)]
}
hs <- c(before, hs, after)
hs <- cat(hs, sep = "\n")
invisible(hs)
}
library(MASS)
data("Boston")
Boston[10, ]
print(help(Boston))
help_console("Boston", "base", format = "html")
names(Boston)
Boston[10, ]
view(Boston)
view(Boston)
write.csv(Boston, file="/Users/subhadippal/Desktop/MidtermSTAt101/MidternExam/Boston11.csv")
iris
iris[1:6]
iris[1:6, ]
write.csv(iris, file="/Users/subhadippal/Desktop/MidtermSTAt101/MidternExam/iris11.csv")
sample(1:6, 8)
sample(8, 1:6)
sample(1:6, 8, replace = TRUE)
X<-cbind(c(4,3), c(2,2), c(2,6), c(5,0), c(0,3), c(4,0))
X
dist(X)
dist(t(X))
dist(t(X[,c(1,4,6)]))
mean(t(X[,c(1,4,6)]))
colmean(t(X[,c(1,4,6)]))
Colmean(t(X[,c(1,4,6)]))
ColMeans(t(X[,c(1,4,6)]))
ColMean(t(X[,c(1,4,6)]))
pi=c(.1,.8,.04,.06)
pi^2
sum(pi^2)
1-sum(pi^2)
sum(pi*(1-pi))
pi*log(pi)
pi=c(.08,.81,.05,.06)
sum(pi)
pi*log(pi)
sum(pi*log(pi))
1-.65
distance_mat <- dist(mtcars, method = 'euclidean')
distance_mat
is.matrix(distance_mat)
# Fitting Hierarchical clustering Model
# to training dataset
set.seed(240)  # Setting seed
Hierar_cl <- hclust(distance_mat, method = "average")
Hierar_cl
plot(Hierar_cl)
3.16^2+3^2+1
(3.16^2+3^2+1)/3
(4^2+2.24^2+3.61^2)
(4^2+2.24^2+3.61^2)/3
(3.16^2+3^2+1)/3+11.3499
X=cbind(c(4,3),c(2,2),c(2,6),c(5,0),c(0,3),c(4,0))
dist(X)
dist(t(X))
dist(t(X[,c(1,4,6)]))
(dist(t(X[,c(1,4,6)])))^2
sum((dist(t(X[,c(1,4,6)])))^2)
3.16^2
sum((dist(t(X[,c(1,4,6)])))^2)
sum((dist(t(X[,c(2,3,5)])))^2)
(20+15+1.1+.9+.8+.5+.02+.001)
35/38.321
e1<-c(0.78,
0.24,
0.37,
0.06,
0.32,
0.3,
0.06,
0.01)
e1
xx<-c(2.44, 4.82,2.43,0.2,0.29,3.32, 1.77,7.65)
xx
e1*xx
e1<-c(0.78,
0.24,
0.37,
0.06,
-0.32,
0.3,
-0.06,
-0.01)
xx<-c(2.44, 4.82,2.43,-0.2,-0.29,-3.32, 1.77,-7.65)
e1*xx
sum(e1*xx)
1/(1+exp(-9))
X=cbind(c(4,3),c(2,2),c(2,6),c(5,0),c(0,3),c(4,0))
sum((dist(t(X[,c(2,3,5)])))^2)
xx<-(t(X[,c(2,3,5)]))
xx
apply(xx, 2, mean)
xx-apply(xx, 2, mean)
apply(xx-apply(xx, 2, mean), 2, mean)
apply(xx, 2, mean)
xx
sum((xx[,1]-1.33333)^2)+sum((xx[,2]-3.666667)^2)
34/3
xx<-(t(X[,c(1,4,6)]))
apply(xx, 2, mean)
sum((xx[,1]-4.33333)^2)+sum((xx[,2]-1)^2)
20/3
54/3
11.333+6.666
sqrt(.7781)
70/1.041
(7.34/4.44)^(1/35)
(7.34/4.44)^(1/35)-1
0.01446605*100
7.35*((100+1.4466)/100)^(20)
2.576*20.1/12
d=2.576*20.1/12
67.1-d
67.1+d
a=76
s=26.4
n=121
d=1.96*s/sqrt(n)
d
a=76
s=26.4
n=121
d=1.96*s/sqrt(n)
d
a-d
a+d
(80+65)/2
(65+40)/2
145/80
72.5/65
0.9091*.15/3.15
0.04329048*8.99
.72-0.04329048*8.99
70/1.021
a=67.1
s=20.1
n=144
d=1.96*s/sqrt(n)
d
a-d
a+d
a=76
s=26.4
n=144
#d=1.645*1.723/sqrt(30366)
d=2.576*s/sqrt(n)
d
a-d
a+d
180/2
(80+65)/2
(40+65)/2
125/80
72.5/65
0.8913*0.14/2.91
0.8913*0.14/2.91*9.34
setwd("/Users/subhadippal/Desktop/MidtermSTAt101/MidternExam/")
dd<-read.csv("german_credit.csv", header=TRUE)
dim(dd)
is.na(dd)
sum(is.na(dd))
names(dd)
summary(dd)
load("loan_data_ch1.RDs")
load("loan_data_ch1.Rds")
load("loan_data_ch1.rds")
load("loan_data_ch1.rds")
load("loan_data_ch1.rds")
loan_data <- readRDS(gzcon(url("https://assets.datacamp.com/production/repositories/162/datasets/8f48a2cbb6150e7ae32435e55f271cad5b4b8ecf/loan_data_ch1.rds")))
loan_data
is.na(loan_data)
sum(is.na(loan_data))
dd=na.omit(loan_data)
dim(dd)
summary(dd)
fit<-glm(loan_status ~loan_amnt+ int_rate+ emp_length   + home_ownership+ annual_inc+age )
fit<-glm(loan_status ~loan_amnt+ int_rate+ emp_length   + home_ownership+ annual_inc+age, data=dd )
fit
summary(fit)
fit<-glm(loan_status ~loan_amnt+ int_rate+ emp_length   + annual_inc+age, data=dd )
summary(fit)
fit<-glm(loan_status ~loan_amnt+ int_rate+ emp_length   + annual_inc+age, data=dd )
fit<-glm(loan_status ~loan_amnt+ int_rate   + annual_inc+age, data=dd )
summary(fit)
fit<-glm(loan_status ~loan_amnt+ int_rate+grade   + annual_inc+age, data=dd )
summary(fit)
fit<-glm(loan_status ~scale(loan_amnt)+ scale(int_rate)+grade   + acale(annual_inc)+scale(age), data=dd )
fit<-glm(loan_status ~scale(loan_amnt)+ scale(int_rate)+grade   + scale(annual_inc)+scale(age), data=dd )
summary(fit)
fit1<-glm(loan_status ~scale(loan_amnt)+ scale(int_rate)+grade   +(age), data=dd )
summary(fit1)
fit1<-glm(loan_status ~ (int_rate)+grade   +(age), data=dd )
summary(fit1)
fit1<-glm(loan_status ~ (int_rate)   +(age), data=dd )
summary(fit1)
dd$age
dd$int_rate
fit1<-glm(loan_status ~ int_rate   +age, data=dd )
fit1$coefficients
fit1$fitted.values
hist(fit1$fitted.values)
fit1
summary(fit1)
exp(.015)
(exp(.015)-1)*100
(exp(-.0095)-1)*100
(exp(-.095)-1)*100
.0095/0.03106
.0095/0.003106
0.095
0.0095/0.003106
0.0095/2
exp(-0.0095/2)\
exp(-0.0095/2)
(exp(-0.0095/2)-1)*100
(exp(-0.0095/4)-1)*100
(0.0095/4)
exp(-0.0095*2)
(exp(-0.0095*2)-1)*100
(0.0095*2)
0.003106 *2
exp(0.019)
exp(-0.019)
(exp(-0.019)-1)*100
-.025+0.015*12.5-.019*45
exp(-.025+0.015*12.5-.019*45)/(1+exp(-.025+0.015*12.5-.019*45))
exp(-.025+0.015*12.5-.019*25)/(1+exp(-.025+0.015*12.5-.019*45))
read.table("https://users.stat.ufl.edu/~winner/data/airline_costs.dat")
ss<-read.table("https://users.stat.ufl.edu/~winner/data/airline_costs.dat")
ss
library(yarrr)
install.packages("yarrr")
library(yarrr)
library(yarrr)
head(diamonds)
diamonds.lm <- lm(formula = value ~ weight + clarity + color,
data = diamonds)
diamonds.lm
knitr::opts_chunk$set(echo = TRUE)
BostonHousing<-read.csv(url("https://raw.githubusercontent.com/subhadippal2019/STAT380UAEU/main/BostonHousing.csv"))
names(BostonHousing)
## Classification tree using Boston Housing data:
# Some notation and additional information on Data
head(BostonHousing)
str(BostonHousing)
BostonHousing$MEDV_Fac = factor(BostonHousing$CAT..MEDV,labels=c("Below","Above"))
BostonHousing$MEDV_Fac
# As we will be using the MEDV_Fac as categorical response, we will remove both, `CAT..MEDV' and `MEDV' to keep on the required of the data.
BostonH=BostonHousing[,-c(13,14)]
#We will work on the BostonH for rest of the activity
library(tree)
###
library(ISLR)
install.packages("tree")
library(tree)
###
library(ISLR)
install.packages("ISLR")
install.packages("rattle")
library(tree)
###
library(ISLR)
#attach(Carseats)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
library(partykit)
BostonHousing<-read.csv(url("https://raw.githubusercontent.com/subhadippal2019/STAT380UAEU/main/BostonHousing.csv"))
names(BostonHousing)
#-------------------------------------
# Grow a general classification tree with multiple covariates
# - minimum number of units that exists in a node in order for a split to be attempted
# - change complexity parameter alpha to -1 - full tree
set.seed(12043)
cls_fit_train = rpart(MEDV_Fac~CRIM+ZN+INDUS+CHAS+NOX+RM+AGE+DIS+RAD+TAX+PTRATIO+LSTAT,data=Training_Set,method="class",minsplit=5,cp=0)
#-------------------------------------
# Grow a general classification tree with multiple covariates
# - minimum number of units that exists in a node in order for a split to be attempted
# - change complexity parameter alpha to -1 - full tree
set.seed(12043)
cls_fit_train = rpart(MEDV_Fac~CRIM+ZN+INDUS+CHAS+NOX+RM+AGE+DIS+RAD+TAX+PTRATIO+LSTAT,data=Training_Set,method="class",minsplit=5,cp=0)
cls_fit_train = rpart(MEDV_Fac~CRIM+ZN+INDUS+CHAS+NOX+RM+AGE+DIS+RAD+TAX+PTRATIO+LSTAT,data=BostonHousing,method="class",minsplit=5,cp=0)
cls_fit_train = rpart(MEDV~CRIM+ZN+INDUS+CHAS+NOX+RM+AGE+DIS+RAD+TAX+PTRATIO+LSTAT,data=BostonHousing,minsplit=5,cp=0)
# plot fitted tree# You may use fancyRpartPlot(fitted_object, caption = NULL)
fancyRpartPlot(cls_fit_train, caption = NULL)
set.seed(12043)
reg_fit_train = rpart(value ~ weight + clarity + color,data=diamonds,minsplit=5,cp=0)
# plot fitted tree# You may use fancyRpartPlot(fitted_object, caption = NULL)
fancyRpartPlot(reg_fit_train, caption = NULL)
dim(diamonds)
reg_fit_train = rpart(value ~ weight + clarity + color,data=diamonds,minsplit=20,cp=.1)
# plot fitted tree# You may use fancyRpartPlot(fitted_object, caption = NULL)
fancyRpartPlot(reg_fit_train, caption = NULL)
reg_fit_train = rpart(value ~ weight + clarity + color,data=diamonds,minsplit=20,cp=0)
# plot fitted tree# You may use fancyRpartPlot(fitted_object, caption = NULL)
fancyRpartPlot(reg_fit_train, caption = NULL)
install.packages("partykit")
library("partykit")
# plot fitted tree# You may use fancyRpartPlot(fitted_object, caption = NULL)
fancyRpartPlot(reg_fit_train, caption = NULL)
help(fancyRpartPlot)
# plot fitted tree# You may use fancyRpartPlot(fitted_object, caption = NULL)
fancyRpartPlot(reg_fit_train,palettes=c("Greys", "Oranges") ,caption = y)
reg_fit_train$method
rpart.plot(reg_fit_train)
reg_fit_train = rpart(value ~ weight + clarity + color,data=diamonds,minsplit=20,cp=0, method = "anova")
rpart.plot(reg_fit_train)
printcp(reg_fit_train)
reg_fit_train = rpart(value ~ weight + clarity + color,data=diamonds,minsplit=20,cp=0.015, method = "anova")
# plot fitted tree# You may use fancyRpartPlot(fitted_object, caption = NULL)
fancyRpartPlot(reg_fit_train,palettes=c("Greys", "Oranges") ,caption = )
rpart.plot(reg_fit_train)
# plot fitted tree# You may use fancyRpartPlot(fitted_object, caption = NULL)
fancyRpartPlot(reg_fit_train,palettes=c( "Oranges") ,caption = )
rpart.plot(reg_fit_train)
reg_fit_train = rpart(value ~ weight + clarity + color,data=diamonds,minsplit=20,cp=0.015, method = "anova")
rpart.plot(reg_fit_train )
reg_fit_train = rpart(value ~ weight + clarity + color,data=diamonds,minsplit=20,cp=0.036, method = "anova")
# plot fitted tree# You may use fancyRpartPlot(fitted_object, caption = NULL)
fancyRpartPlot(reg_fit_train,palettes=c( "Oranges") ,caption = )
rpart.plot(reg_fit_train )
diamonds$value
help(rpart.plot)
rpart.plot(reg_fit_train, roundint = FALSE )
help(rpart.plot)
rpart.plot(reg_fit_train, roundint = FALSE,  extra=1, digits=5 )
# plot fitted tree# You may use fancyRpartPlot(fitted_object, caption = NULL)
fancyRpartPlot(reg_fit_train,palettes=c( "Oranges") ,roundint = FALSE,  extra=1, digits=5 )
# plot fitted tree# You may use fancyRpartPlot(fitted_object, caption = NULL)
fancyRpartPlot(reg_fit_train,palettes=c( "Oranges") ,roundint = FALSE,  extra=1, digits=5 )
help(diamonds)
reg_fit_train = rpart(value ~ weight + clarity + as.factor(color),data=diamonds,minsplit=20,cp=0.036, method = "anova")
rpart.plot(reg_fit_train, roundint = FALSE,  extra=1, digits=5 )
reg_fit_train = rpart(value ~ weight + clarity + as.factor(color),data=diamonds,minsplit=20,cp=0.056, method = "anova")
rpart.plot(reg_fit_train, roundint = FALSE,  extra=1, digits=5 )
# plot fitted tree# You may use fancyRpartPlot(fitted_object, caption = NULL)
fancyRpartPlot(reg_fit_train,palettes=c( "Oranges") ,roundint = FALSE,  extra=1, digits=5 )
# plot fitted tree# You may use fancyRpartPlot(fitted_object, caption = NULL)
fancyRpartPlot(reg_fit_train,palettes=c( "Oranges")  )
rpart.plot(reg_fit_train, roundint = FALSE,  extra=1, digits=5 )
diamonds$clarity
MAX(diamonds$clarity)
max(diamonds$clarity)
X=cbind(c(4,3),c(2,2),c(2,6),c(5,0),c(0,3),c(4,0))
distance_mat <- dist(X, method = 'euclidean')
distance_mat
distance_mat <- dist(t(X), method = 'euclidean')
distance_mat
plot(X)
plot(t(X))
plot(t(X), labels=1:6)
plot(t(X), text=1:6)
help(plot)
plot(t(X), labels=1:6)
plot(t(X), label=1:6)
plot(t(X))
plot(t(X))
text(t(X), labels =1:6)
plot(t(X), type=null)
plot(t(X), type=na)
plot(t(X), type='n')
text(t(X), labels =1:6)
R1 <- randorth(4)
library(randRotation)
install.packages(" randRotation")
install.packages("randRotation")
library(pracma)
library(randRotation)
R1 <- randorth(4)
randortho(5)
randortho(3)
A=randortho(3)
A1=randortho(2)
A2=randortho(2)
AA=diag(7)
AA
AA[1:3, 1:3]=A
AA
AA[4:5, 4:5]=A2
AA[6:7, 6:7]=A3
AA[6:7, 6:7]=A1
AA
t(AA)%*%AA
round(t(AA)%*%AA, 2)
A
AA
permute(1:7)
library(gtools)
library(gtool)
install.packages("gtools")
library(gtool)
library(gtools)
x <- 1:10
permute(x)
lab=permute(1:7)
BB=AA[lab, lab]
BB
round(BB,2)
round(t(BB)%*%BB,2)
round(BB,2)
round(BB,3)
write.csv(round(BB,3), "eigenVec.csv")
paste0("Col(", paste0(round(BB,3)[,1], collapse=","),")")
apply(1:7, 2,FUN = function(x){paste0("Col(", paste0(round(BB,3)[,x], collapse=","),")")})
apply(1:7, 1,FUN = function(x){paste0("Col(", paste0(round(BB,3)[,x], collapse=","),")")})
apply(as.matrix(1:7, ncol=7), 1,FUN = function(x){paste0("Col(", paste0(round(BB,3)[,x], collapse=","),")")})
paste0("Col\\{", paste0(round(BB,3)[,1], collapse=","),"\\}")
paste0("Col\{", paste0(round(BB,3)[,1], collapse=","),"\}")
cat(paste0("\\Col\\{", paste0(round(BB,3)[,1], collapse=","),"\\}"))
cat(paste0("\\Col{", paste0(round(BB,3)[,1], collapse=","),"}"))
cat(paste0("\\Col{", paste0(round(BB,3)[,2], collapse=","),"}"))
cat(paste0("\\Col{", paste0(round(BB,3)[,3], collapse=","),"}"))
cat(paste0("\\Col{", paste0(round(BB,3)[,4], collapse=","),"}"))
cat(paste0("\\Col\\{", paste0(round(BB,2)[,1], collapse=","),"\\}"))
cat(apply(as.matrix(1:7, ncol=7), 1,FUN = function(x){paste0("\\Col{", paste0(round(BB,3)[,x], collapse=","),"},")}))
cat(apply(as.matrix(1:7, ncol=7), 1,FUN = function(x){paste0("\\Col{", paste0(round(BB,2)[,x], collapse=","),"},")}))
45/52
45/51
distance_mat <- dist(t(X), method = 'euclidean')
distance_mat
is.matrix(distance_mat)
str(distance_mat)
distance_mat[1]
distance_mat[2]
distance_mat[10]
6*5/2
distance_mat[15]
distance_mat[16]
X=cbind(c(4,3),c(2,2),c(2,6),c(5,0),c(0,3))
distance_mat <- dist(t(X), method = 'euclidean')
distance_mat[1]
distance_mat[1]=2
distance_mat
distance_mat[2]
distance_mat[3]
distance_mat[1:3]=c(7,4,56)
distance_mat[1:3]=c(7,4,6)
distance_mat
X=cbind(c(4,3),c(2,2),c(2,6),c(5,0),c(0,3))
distance_mat <- dist(t(X), method = 'euclidean')
distance_mat
X=cbind(c(4,3),c(2,2),c(2,6),c(5,0))
distance_mat <- dist(t(X), method = 'euclidean')
distance_mat
distance_mat[1:6]=c(7,4,6,4.5,3,1.5)
distance_mat
hclust(distance_mat)
plot(distance_mat)
hc=hclust(distance_mat)
plot(hc)
